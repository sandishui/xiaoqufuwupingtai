<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">


 	<!-- shiro配置xml，放在spring的配置文件中即可 -->
	<!-- 权限shiro配置 开始 -->
	<!-- 用户授权信息Cache  --> 
    <bean id="memoryConstrainedCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
  
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.lanou3g.platform.web.shiro.MyShiroRealm">
    	 <property name="cacheManager" ref="memoryConstrainedCacheManager" /> 
    </bean> 
  
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>  
  
  
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/login"/>  
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
        <!-- <property name="successUrl" value="/system/main"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
        <property name="unauthorizedUrl" value="/main/noperm"/>  
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions">  
            <value>  
                <!-- 不需要验证 -->  
            	/ = anon
            	/main/noperm = anon
            	<!-- 需要验证 -->
                /login = authc
                /menu/menulist = authc,perms["system-menu-list"]
                /role/rolelist = authc,perms["system-role-list"]
                /user/userlist = authc,perms["system-admin-list"]
                /scrap/scraplist = authc,perms["scrap-list"]
                /reclamationorder/reclamationorderlist = authc,perms["scrap-collector-list"]
                //owner/ownerlist = authc,perms["owner-list"]
                /housingEstate/housingEstateList = authc,perms["housing-estate-list"]
                /dict/dictlist = authc,perms["system-dict-list"]
                <!-- 需要验证具有role_001角色的用户可以访问，多用于跳转页面 
                	可以配置多个，要用英文双引号扩起来用英文逗号分隔，例如roles["role_001,role_002"]
                -->  
               <!--  /user/toImportUsers.do = authc,roles[role_001]  
                /ztree/toZtree.do = authc,roles["role_001,role_002"]  
                需要验证具有role_001角色的selUserInfo权限的用户可以访问 ，多用于页面中某个请求  
                /user/selUserInfo.do = authc,perms[role_001:selUserInfo]  
                 需要验证具有role_001角色的selUserInfo权限的用户可以访问 ，多用于页面中某个请求  
                /user/importUsers.do = authc,perms["role_001:add:,role_002:modify"]  -->
                <!-- 不需要验证 -->  
                /** = anon    
            </value>  
        </property>  
    </bean>  
  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/> 
    
    <!-- 权限shiro配置 结束 -->
</beans>